//
// Created by Samuel Azcona on 16/03/2020.
//

#include <wintercpp/data/sql/statement/winter_data_sql_insert.h>
#include <wintercpp/util/winter_string_util.h>
using namespace winter::data::sql;

Insert::Insert(const std::string &query) : Statement<Insert>(query, StatementType::kInsert) {}

Insert::Insert() : Statement<Insert>("INSERT", StatementType::kInsert) {}

Insert::Insert(std::shared_ptr<Table> table) : Statement<Insert>("INSERT INTO $table", StatementType::kInsert),
					       table_(std::move(table)) {}
/*
template<typename T>
Insert &
Insert::setId(const std::string &idAttributeName, const T &value, const
std::string &set_custom_value) { prepared_statement_->entityId(new
PreparedStatementField<T>(idAttributeName, value, custom_value)); return *this;
}

template<typename T>
Insert &
Insert::setId(const std::string &idAttributeName, const T &value) {
  prepared_statement_->entityId(new PreparedStatementField<T>(idAttributeName,
value)); return *this;
}
*/

/*
void Insert::generateId(){
  if(table_->isGenerateId()){
    if(prepared_statement_){
      if(!prepared_statement_->FieldIsPresent(table_->idColumn()->columnName())){
        auto id = "";
        switch (table_->idType()) {
        case IDType::String:
          if(table_->binary()){
            setId(table_->idColumn()->columnName(),
std::any_cast<std::string>(table_->generateId()), "UNHEX(?)"); } else {
            setId(table_->idColumn()->columnName(),
std::any_cast<std::string>(table_->generateId()));
          }
          break;
        case IDType::Int:
          setId(table_->idColumn()->columnName(),
std::any_cast<int>(table_->GenerateId())); break; case IDType::Long:
          setId(table_->idColumn()->columnName(),
std::any_cast<long>(table_->GenerateId())); break; default: std::string message
= "set_id field " + table_->idColumn()->name() + " for table " +
table_->name() + "is not set and given type can not be autogenerated"; throw
WinterException(message);
        }
      }
    }
  }
}
 */
/*
void Insert::GenerateId() {
  if(table_->isGenerateId()){
    if(prepared_statement_){
      if(prepared_statement_->FieldIsPresent(table_->idColumn()->columnName())){
        switch (table_->idColumn()->type()) {
        case FieldType::String:
          set_transaction_id(
dynamic_cast<PreparedStatementField<std::string>*>(prepared_statement_->findByField(table_->idColumn()->columnName()).get())->value());
          break;
        case FieldType::Int:
          transaction_id(
std::to_string(dynamic_cast<PreparedStatementField<int>*>(prepared_statement_->findByField(table_->idColumn()->name()).get())->value()));
          break;
        case FieldType::Long:
          set_transaction_id(std::to_string(dynamic_cast<PreparedStatementField<long>*>(prepared_statement_->FindByField(table_->idColumn()->columnName()).get())->value()));
          break;
        default:
          std::string message = "set_id field " + table_->idColumn()->columnName() +
" for table " + table_->name() + "is not set and given type can not be
autogenerated"; throw WinterException(message);
        }
      }
    }
  }
}
*/

void Insert::BuildStatement() {
  if (table_) {
    winter::util::string::replace(statement_template_, "$table", table_->name());
  }
  prepared_statement_->set_statement_template(statement_template_);
  // GenerateId();
}
